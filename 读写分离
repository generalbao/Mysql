2017年2月13日16:30:46


环境描述：
操作系统：CentOS7_x64
主服务器Master：192.168.0.202
从服务器Slave：192.168.0.203
调度服务器MySQL-Proxy：192.168.0.204

 一、mysql主从复制
 参考 https://github.com/generalbao/Mysql/blob/master/%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93
 
 二、mysql-proxy实现读写分离

1、安装mysql-proxy

实现读写分离是有lua脚本实现的，现在mysql-proxy里面已经集成，无需再安装

下载：http://dev.mysql.com/downloads/mysql-proxy/

tar zxvf mysql-proxy-0.8.3-linux-glibc2.3-x86-64bit.tar.gz
mv mysql-proxy-0.8.3-linux-glibc2.3-x86-64bit /usr/local/mysql-proxy

tar zxvf mysql-proxy-0.8.3-linux-glibc2.3-x86-64bit.tar.gz
mv mysql-proxy-0.8.3-linux-glibc2.3-x86-64bit /usr/local/mysql-proxy
2、配置mysql-proxy，创建主配置文件


cd /usr/local/mysql-proxy
mkdir lua #创建脚本存放目录
mkdir logs #创建日志目录
cp share/doc/mysql-proxy/rw-splitting.lua ./lua #复制读写分离配置文件
cp share/doc/mysql-proxy/admin-sql.lua ./lua #复制管理脚本
vi /etc/mysql-proxy.cnf   #创建配置文件
[mysql-proxy]
user=root #运行mysql-proxy用户
admin-username=proxy #主从mysql共有的用户
admin-password=123.com #用户的密码
proxy-address=192.168.0.204:4000 #mysql-proxy运行ip和端口，不加端口，默认4040
proxy-read-only-backend-addresses=192.168.0.203 #指定后端从slave读取数据
proxy-backend-addresses=192.168.0.202 #指定后端主master写入数据
proxy-lua-script=/usr/local/mysql-proxy/lua/rw-splitting.lua #指定读写分离配置文件位置
admin-lua-script=/usr/local/mysql-proxy/lua/admin-sql.lua #指定管理脚本
log-file=/usr/local/mysql-proxy/logs/mysql-proxy.log #日志位置
log-level=info #定义log日志级别，由高到低分别有(error|warning|info|message|debug)
daemon=true    #以守护进程方式运行
keepalive=true #mysql-proxy崩溃时，尝试重启
保存退出！
chmod 660 /etc/mysql-porxy.cnf


3、修改读写分离配置文件

vi /usr/local/mysql-proxy/lua/rw-splitting.lua
if not proxy.global.config.rwsplit then
 proxy.global.config.rwsplit = {
  min_idle_connections = 1, #默认超过4个连接数时，才开始读写分离，改为1
  max_idle_connections = 1, #默认8，改为1
  is_debug = false
 }
end


4、启动mysql-proxy

/usr/local/mysql-proxy/bin/mysql-proxy --defaults-file=/etc/mysql-proxy.cnf
netstat -tupln | grep 4000 #已经启动
tcp 0 0 192.168.0.204:4000 0.0.0.0:* LISTEN 1264/mysql-proxy
关闭mysql-proxy使用：killall -9 mysql-proxy

5 测试
 
  
aaa  在主服务器中 mysql -u root 
  select * from test.test;
   insert into test.test values(null,'i am read masterServer');
   
   
 bbb 首先在从服务器中 先关闭 主从复制  stop slave;
  同样在从服务器中  mysql -u root
  select * from test.test;
  insert into test.test values(null,'i am read');
Query OK, 1 row affected (0.00 sec)
MariaDB [(none)]> select * from test.test;
+----+-----------+
| id | name      |
+----+-----------+
| 17 | i am read |

  
 cccc  在 调度服务器MySQL-Proxy：192.168.0.204 运行 mysql -u proxy -h 192.168.0.204 -P 4000 -p123.com
  
 select * from test.test;
 会发现数据只是从服务器中的数据

+----+-----------+
| id | name      |
+----+-----------+
| 17 | i am read |
+----+-----------+
这时候插入一条数据

insert into test.test values(null,'insertxxx');
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]> select * from test.test;      为什么没有 insertxxx呢？因为数据只能是从数据库中的数据
+----+-----------+
| id | name      |
+----+-----------+
| 17 | i am read |

ddd  在主数据库中查看 就有
select * from test;
+----+-----------+
| id | name      |
+----+-----------+
| 16 | insertxxx |
+----+-----------+
1 row in set (0.00 sec)
